%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.0
-module(user_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_User.router_service'/1, 'enum_value_by_symbol_User.router_service'/1]).
-export(['enum_symbol_by_value_User.gender'/1, 'enum_value_by_symbol_User.gender'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("user_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'User.router_service'() :: 'Search' | 'Admin'.
-type 'User.gender'() :: 'Male' | 'Female'.
-export_type(['User.router_service'/0, 'User.gender'/0]).

%% message types
-type 'User.LoginReq'() :: #'User.LoginReq'{}.

-type 'User.LoginResp'() :: #'User.LoginResp'{}.

-type 'User.Person'() :: #'User.Person'{}.

-type 'User.RangeResult'() :: #'User.RangeResult'{}.

-type 'User.RangeRequest'() :: #'User.RangeRequest'{}.

-type 'User.Name'() :: #'User.Name'{}.

-type 'User.Ids'() :: #'User.Ids'{}.

-export_type(['User.LoginReq'/0, 'User.LoginResp'/0, 'User.Person'/0, 'User.RangeResult'/0, 'User.RangeRequest'/0, 'User.Name'/0, 'User.Ids'/0]).

-spec encode_msg(#'User.LoginReq'{} | #'User.LoginResp'{} | #'User.Person'{} | #'User.RangeResult'{} | #'User.RangeRequest'{} | #'User.Name'{} | #'User.Ids'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'User.LoginReq'{} | #'User.LoginResp'{} | #'User.Person'{} | #'User.RangeResult'{} | #'User.RangeRequest'{} | #'User.Name'{} | #'User.Ids'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'User.LoginReq'{} | #'User.LoginResp'{} | #'User.Person'{} | #'User.RangeResult'{} | #'User.RangeRequest'{} | #'User.Name'{} | #'User.Ids'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'User.LoginReq' ->
	  'encode_msg_User.LoginReq'(id(Msg, TrUserData),
				     TrUserData);
      'User.LoginResp' ->
	  'encode_msg_User.LoginResp'(id(Msg, TrUserData),
				      TrUserData);
      'User.Person' ->
	  'encode_msg_User.Person'(id(Msg, TrUserData),
				   TrUserData);
      'User.RangeResult' ->
	  'encode_msg_User.RangeResult'(id(Msg, TrUserData),
					TrUserData);
      'User.RangeRequest' ->
	  'encode_msg_User.RangeRequest'(id(Msg, TrUserData),
					 TrUserData);
      'User.Name' ->
	  'encode_msg_User.Name'(id(Msg, TrUserData), TrUserData);
      'User.Ids' ->
	  'encode_msg_User.Ids'(id(Msg, TrUserData), TrUserData)
    end.


'encode_msg_User.LoginReq'(Msg, TrUserData) ->
    'encode_msg_User.LoginReq'(Msg, <<>>, TrUserData).


'encode_msg_User.LoginReq'(#'User.LoginReq'{email = F1,
					    passwd = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_User.LoginResp'(Msg, TrUserData) ->
    'encode_msg_User.LoginResp'(Msg, <<>>, TrUserData).


'encode_msg_User.LoginResp'(#'User.LoginResp'{res = F1,
					      person = F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     'e_mfield_User.LoginResp_person'(TrF2,
					      <<B1/binary, 18>>, TrUserData)
	   end
    end.

'encode_msg_User.Person'(Msg, TrUserData) ->
    'encode_msg_User.Person'(Msg, <<>>, TrUserData).


'encode_msg_User.Person'(#'User.Person'{id = F1,
					name = F2, age = F3, passwd = F4,
					email = F5, sex = F6},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     'e_enum_User.gender'(TrF6, <<B5/binary, 48>>,
				  TrUserData)
	   end
    end.

'encode_msg_User.RangeResult'(Msg, TrUserData) ->
    'encode_msg_User.RangeResult'(Msg, <<>>, TrUserData).


'encode_msg_User.RangeResult'(#'User.RangeResult'{persons
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_User.RangeResult_persons'(TrF1, Bin,
						TrUserData)
      end
    end.

'encode_msg_User.RangeRequest'(Msg, TrUserData) ->
    'encode_msg_User.RangeRequest'(Msg, <<>>, TrUserData).


'encode_msg_User.RangeRequest'(#'User.RangeRequest'{min_age
							= F1,
						    max_age = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_User.Name'(Msg, TrUserData) ->
    'encode_msg_User.Name'(Msg, <<>>, TrUserData).


'encode_msg_User.Name'(#'User.Name'{name = F1}, Bin,
		       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

'encode_msg_User.Ids'(Msg, TrUserData) ->
    'encode_msg_User.Ids'(Msg, <<>>, TrUserData).


'encode_msg_User.Ids'(#'User.Ids'{ids = F1}, Bin,
		      TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true -> 'e_field_User.Ids_ids'(TrF1, Bin, TrUserData)
      end
    end.

'e_mfield_User.LoginResp_person'(Msg, Bin,
				 TrUserData) ->
    SubBin = 'encode_msg_User.Person'(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_User.RangeResult_persons'(Msg, Bin,
				    TrUserData) ->
    SubBin = 'encode_msg_User.Person'(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_User.RangeResult_persons'([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_User.RangeResult_persons'(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    'e_field_User.RangeResult_persons'(Rest, Bin3,
				       TrUserData);
'e_field_User.RangeResult_persons'([], Bin,
				   _TrUserData) ->
    Bin.

'e_field_User.Ids_ids'([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    'e_field_User.Ids_ids'(Rest, Bin3, TrUserData);
'e_field_User.Ids_ids'([], Bin, _TrUserData) -> Bin.

'e_enum_User.gender'('Male', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_User.gender'('Female', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_User.gender'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('User.LoginReq', Bin, TrUserData) ->
    id('decode_msg_User.LoginReq'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('User.LoginResp', Bin, TrUserData) ->
    id('decode_msg_User.LoginResp'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('User.Person', Bin, TrUserData) ->
    id('decode_msg_User.Person'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('User.RangeResult', Bin,
		  TrUserData) ->
    id('decode_msg_User.RangeResult'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('User.RangeRequest', Bin,
		  TrUserData) ->
    id('decode_msg_User.RangeRequest'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('User.Name', Bin, TrUserData) ->
    id('decode_msg_User.Name'(Bin, TrUserData), TrUserData);
decode_msg_2_doit('User.Ids', Bin, TrUserData) ->
    id('decode_msg_User.Ids'(Bin, TrUserData), TrUserData).



'decode_msg_User.LoginReq'(Bin, TrUserData) ->
    'dfp_read_field_def_User.LoginReq'(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_User.LoginReq'(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_User.LoginReq_email'(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
'dfp_read_field_def_User.LoginReq'(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_User.LoginReq_passwd'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_User.LoginReq'(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'User.LoginReq'{email = F@_1, passwd = F@_2};
'dfp_read_field_def_User.LoginReq'(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    'dg_read_field_def_User.LoginReq'(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

'dg_read_field_def_User.LoginReq'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.LoginReq'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_User.LoginReq'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_User.LoginReq_email'(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  'd_field_User.LoginReq_passwd'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.LoginReq'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		'skip_64_User.LoginReq'(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		'skip_length_delimited_User.LoginReq'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		'skip_group_User.LoginReq'(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		'skip_32_User.LoginReq'(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
'dg_read_field_def_User.LoginReq'(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'User.LoginReq'{email = F@_1, passwd = F@_2}.

'd_field_User.LoginReq_email'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_User.LoginReq_email'(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_User.LoginReq_email'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_User.LoginReq'(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

'd_field_User.LoginReq_passwd'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_User.LoginReq_passwd'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_User.LoginReq_passwd'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_User.LoginReq'(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

'skip_varint_User.LoginReq'(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_User.LoginReq'(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
'skip_varint_User.LoginReq'(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.LoginReq'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

'skip_length_delimited_User.LoginReq'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.LoginReq'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'skip_length_delimited_User.LoginReq'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.LoginReq'(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

'skip_group_User.LoginReq'(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.LoginReq'(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

'skip_32_User.LoginReq'(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.LoginReq'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

'skip_64_User.LoginReq'(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.LoginReq'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

'decode_msg_User.LoginResp'(Bin, TrUserData) ->
    'dfp_read_field_def_User.LoginResp'(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_User.LoginResp'(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_User.LoginResp_res'(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
'dfp_read_field_def_User.LoginResp'(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_User.LoginResp_person'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_User.LoginResp'(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'User.LoginResp'{res = F@_1, person = F@_2};
'dfp_read_field_def_User.LoginResp'(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    'dg_read_field_def_User.LoginResp'(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

'dg_read_field_def_User.LoginResp'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.LoginResp'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_User.LoginResp'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_User.LoginResp_res'(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      18 ->
	  'd_field_User.LoginResp_person'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.LoginResp'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		'skip_64_User.LoginResp'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		'skip_length_delimited_User.LoginResp'(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		'skip_group_User.LoginResp'(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		'skip_32_User.LoginResp'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
'dg_read_field_def_User.LoginResp'(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'User.LoginResp'{res = F@_1, person = F@_2}.

'd_field_User.LoginResp_res'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_User.LoginResp_res'(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
'd_field_User.LoginResp_res'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_User.LoginResp'(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

'd_field_User.LoginResp_person'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_User.LoginResp_person'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_User.LoginResp_person'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_User.Person'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_User.LoginResp'(RestF, 0, 0, F@_1,
					if Prev == undefined -> NewFValue;
					   true ->
					       'merge_msg_User.Person'(Prev,
								       NewFValue,
								       TrUserData)
					end,
					TrUserData).

'skip_varint_User.LoginResp'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_User.LoginResp'(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
'skip_varint_User.LoginResp'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.LoginResp'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

'skip_length_delimited_User.LoginResp'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.LoginResp'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'skip_length_delimited_User.LoginResp'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.LoginResp'(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

'skip_group_User.LoginResp'(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.LoginResp'(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

'skip_32_User.LoginResp'(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.LoginResp'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

'skip_64_User.LoginResp'(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.LoginResp'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

'decode_msg_User.Person'(Bin, TrUserData) ->
    'dfp_read_field_def_User.Person'(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_User.Person'(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    'd_field_User.Person_id'(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_User.Person'(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    'd_field_User.Person_name'(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_User.Person'(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    'd_field_User.Person_age'(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_User.Person'(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    'd_field_User.Person_passwd'(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_User.Person'(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    'd_field_User.Person_email'(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_User.Person'(<<48, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    'd_field_User.Person_sex'(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
'dfp_read_field_def_User.Person'(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, _) ->
    #'User.Person'{id = F@_1, name = F@_2, age = F@_3,
		   passwd = F@_4, email = F@_5, sex = F@_6};
'dfp_read_field_def_User.Person'(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    'dg_read_field_def_User.Person'(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'dg_read_field_def_User.Person'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.Person'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
'dg_read_field_def_User.Person'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_User.Person_id'(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  'd_field_User.Person_name'(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  'd_field_User.Person_age'(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, TrUserData);
      34 ->
	  'd_field_User.Person_passwd'(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      42 ->
	  'd_field_User.Person_email'(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  'd_field_User.Person_sex'(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.Person'(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		'skip_64_User.Person'(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		'skip_length_delimited_User.Person'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, TrUserData);
	    3 ->
		'skip_group_User.Person'(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		'skip_32_User.Person'(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
'dg_read_field_def_User.Person'(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, _) ->
    #'User.Person'{id = F@_1, name = F@_2, age = F@_3,
		   passwd = F@_4, email = F@_5, sex = F@_6}.

'd_field_User.Person_id'(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    'd_field_User.Person_id'(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'd_field_User.Person_id'(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_User.Person'(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'd_field_User.Person_name'(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    'd_field_User.Person_name'(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'd_field_User.Person_name'(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_User.Person'(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, F@_6,
				     TrUserData).

'd_field_User.Person_age'(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    'd_field_User.Person_age'(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'd_field_User.Person_age'(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_User.Person'(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, F@_6,
				     TrUserData).

'd_field_User.Person_passwd'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    'd_field_User.Person_passwd'(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
'd_field_User.Person_passwd'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_User.Person'(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, F@_6,
				     TrUserData).

'd_field_User.Person_email'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    'd_field_User.Person_email'(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'd_field_User.Person_email'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_User.Person'(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, F@_6,
				     TrUserData).

'd_field_User.Person_sex'(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    'd_field_User.Person_sex'(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
'd_field_User.Person_sex'(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_User.gender'(begin
						    <<Res:32/signed-native>> =
							<<(X bsl N +
							     Acc):32/unsigned-native>>,
						    id(Res, TrUserData)
						  end),
			     TrUserData),
			  Rest},
    'dfp_read_field_def_User.Person'(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, NewFValue,
				     TrUserData).

'skip_varint_User.Person'(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    'skip_varint_User.Person'(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData);
'skip_varint_User.Person'(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    'dfp_read_field_def_User.Person'(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'skip_length_delimited_User.Person'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.Person'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, TrUserData);
'skip_length_delimited_User.Person'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.Person'(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'skip_group_User.Person'(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.Person'(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'skip_32_User.Person'(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    'dfp_read_field_def_User.Person'(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'skip_64_User.Person'(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    'dfp_read_field_def_User.Person'(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

'decode_msg_User.RangeResult'(Bin, TrUserData) ->
    'dfp_read_field_def_User.RangeResult'(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

'dfp_read_field_def_User.RangeResult'(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    'd_field_User.RangeResult_persons'(Rest, Z1, Z2, F@_1,
				       TrUserData);
'dfp_read_field_def_User.RangeResult'(<<>>, 0, 0, R1,
				      TrUserData) ->
    #'User.RangeResult'{persons =
			    lists_reverse(R1, TrUserData)};
'dfp_read_field_def_User.RangeResult'(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    'dg_read_field_def_User.RangeResult'(Other, Z1, Z2,
					 F@_1, TrUserData).

'dg_read_field_def_User.RangeResult'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.RangeResult'(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_User.RangeResult'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_User.RangeResult_persons'(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.RangeResult'(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		'skip_64_User.RangeResult'(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		'skip_length_delimited_User.RangeResult'(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		'skip_group_User.RangeResult'(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		'skip_32_User.RangeResult'(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_User.RangeResult'(<<>>, 0, 0, R1,
				     TrUserData) ->
    #'User.RangeResult'{persons =
			    lists_reverse(R1, TrUserData)}.

'd_field_User.RangeResult_persons'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_User.RangeResult_persons'(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
'd_field_User.RangeResult_persons'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_User.Person'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_User.RangeResult'(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

'skip_varint_User.RangeResult'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_User.RangeResult'(Rest, Z1, Z2, F@_1,
				   TrUserData);
'skip_varint_User.RangeResult'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_User.RangeResult'(Rest, Z1, Z2,
					  F@_1, TrUserData).

'skip_length_delimited_User.RangeResult'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.RangeResult'(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
'skip_length_delimited_User.RangeResult'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.RangeResult'(Rest2, 0, 0, F@_1,
					  TrUserData).

'skip_group_User.RangeResult'(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.RangeResult'(Rest, 0, Z2, F@_1,
					  TrUserData).

'skip_32_User.RangeResult'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_User.RangeResult'(Rest, Z1, Z2,
					  F@_1, TrUserData).

'skip_64_User.RangeResult'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_User.RangeResult'(Rest, Z1, Z2,
					  F@_1, TrUserData).

'decode_msg_User.RangeRequest'(Bin, TrUserData) ->
    'dfp_read_field_def_User.RangeRequest'(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

'dfp_read_field_def_User.RangeRequest'(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_User.RangeRequest_min_age'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_User.RangeRequest'(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_User.RangeRequest_max_age'(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
'dfp_read_field_def_User.RangeRequest'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #'User.RangeRequest'{min_age = F@_1, max_age = F@_2};
'dfp_read_field_def_User.RangeRequest'(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_User.RangeRequest'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'dg_read_field_def_User.RangeRequest'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.RangeRequest'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'dg_read_field_def_User.RangeRequest'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_User.RangeRequest_min_age'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  'd_field_User.RangeRequest_max_age'(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.RangeRequest'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		'skip_64_User.RangeRequest'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		'skip_length_delimited_User.RangeRequest'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		'skip_group_User.RangeRequest'(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		'skip_32_User.RangeRequest'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
'dg_read_field_def_User.RangeRequest'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'User.RangeRequest'{min_age = F@_1, max_age = F@_2}.

'd_field_User.RangeRequest_min_age'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_User.RangeRequest_min_age'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_User.RangeRequest_min_age'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_User.RangeRequest'(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

'd_field_User.RangeRequest_max_age'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_User.RangeRequest_max_age'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_User.RangeRequest_max_age'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_User.RangeRequest'(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

'skip_varint_User.RangeRequest'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_User.RangeRequest'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'skip_varint_User.RangeRequest'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.RangeRequest'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_length_delimited_User.RangeRequest'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.RangeRequest'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'skip_length_delimited_User.RangeRequest'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.RangeRequest'(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

'skip_group_User.RangeRequest'(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.RangeRequest'(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

'skip_32_User.RangeRequest'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.RangeRequest'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_64_User.RangeRequest'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_User.RangeRequest'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'decode_msg_User.Name'(Bin, TrUserData) ->
    'dfp_read_field_def_User.Name'(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

'dfp_read_field_def_User.Name'(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    'd_field_User.Name_name'(Rest, Z1, Z2, F@_1,
			     TrUserData);
'dfp_read_field_def_User.Name'(<<>>, 0, 0, F@_1, _) ->
    #'User.Name'{name = F@_1};
'dfp_read_field_def_User.Name'(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    'dg_read_field_def_User.Name'(Other, Z1, Z2, F@_1,
				  TrUserData).

'dg_read_field_def_User.Name'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.Name'(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
'dg_read_field_def_User.Name'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_User.Name_name'(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.Name'(Rest, 0, 0, F@_1, TrUserData);
	    1 -> 'skip_64_User.Name'(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_User.Name'(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		'skip_group_User.Name'(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> 'skip_32_User.Name'(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_User.Name'(<<>>, 0, 0, F@_1, _) ->
    #'User.Name'{name = F@_1}.

'd_field_User.Name_name'(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_User.Name_name'(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
'd_field_User.Name_name'(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_User.Name'(RestF, 0, 0, NewFValue,
				   TrUserData).

'skip_varint_User.Name'(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    'skip_varint_User.Name'(Rest, Z1, Z2, F@_1, TrUserData);
'skip_varint_User.Name'(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_User.Name'(Rest, Z1, Z2, F@_1,
				   TrUserData).

'skip_length_delimited_User.Name'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.Name'(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
'skip_length_delimited_User.Name'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.Name'(Rest2, 0, 0, F@_1,
				   TrUserData).

'skip_group_User.Name'(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.Name'(Rest, 0, Z2, F@_1,
				   TrUserData).

'skip_32_User.Name'(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    'dfp_read_field_def_User.Name'(Rest, Z1, Z2, F@_1,
				   TrUserData).

'skip_64_User.Name'(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    'dfp_read_field_def_User.Name'(Rest, Z1, Z2, F@_1,
				   TrUserData).

'decode_msg_User.Ids'(Bin, TrUserData) ->
    'dfp_read_field_def_User.Ids'(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

'dfp_read_field_def_User.Ids'(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    'd_pfield_User.Ids_ids'(Rest, Z1, Z2, F@_1, TrUserData);
'dfp_read_field_def_User.Ids'(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    'd_field_User.Ids_ids'(Rest, Z1, Z2, F@_1, TrUserData);
'dfp_read_field_def_User.Ids'(<<>>, 0, 0, R1,
			      TrUserData) ->
    #'User.Ids'{ids = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_User.Ids'(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    'dg_read_field_def_User.Ids'(Other, Z1, Z2, F@_1,
				 TrUserData).

'dg_read_field_def_User.Ids'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_User.Ids'(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
'dg_read_field_def_User.Ids'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_pfield_User.Ids_ids'(Rest, 0, 0, F@_1, TrUserData);
      8 ->
	  'd_field_User.Ids_ids'(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_User.Ids'(Rest, 0, 0, F@_1, TrUserData);
	    1 -> 'skip_64_User.Ids'(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_User.Ids'(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		'skip_group_User.Ids'(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> 'skip_32_User.Ids'(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_User.Ids'(<<>>, 0, 0, R1,
			     TrUserData) ->
    #'User.Ids'{ids = lists_reverse(R1, TrUserData)}.

'd_field_User.Ids_ids'(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_User.Ids_ids'(Rest, N + 7, X bsl N + Acc, F@_1,
			   TrUserData);
'd_field_User.Ids_ids'(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_User.Ids'(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

'd_pfield_User.Ids_ids'(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_pfield_User.Ids_ids'(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
'd_pfield_User.Ids_ids'(<<0:1, X:7, Rest/binary>>, N,
			Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = 'd_packed_field_User.Ids_ids'(PackedBytes, 0,
					   0, E, TrUserData),
    'dfp_read_field_def_User.Ids'(Rest2, 0, 0, NewSeq,
				  TrUserData).

'd_packed_field_User.Ids_ids'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    'd_packed_field_User.Ids_ids'(Rest, N + 7,
				  X bsl N + Acc, AccSeq, TrUserData);
'd_packed_field_User.Ids_ids'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'd_packed_field_User.Ids_ids'(RestF, 0, 0,
				  [NewFValue | AccSeq], TrUserData);
'd_packed_field_User.Ids_ids'(<<>>, 0, 0, AccSeq, _) ->
    AccSeq.

'skip_varint_User.Ids'(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    'skip_varint_User.Ids'(Rest, Z1, Z2, F@_1, TrUserData);
'skip_varint_User.Ids'(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_User.Ids'(Rest, Z1, Z2, F@_1,
				  TrUserData).

'skip_length_delimited_User.Ids'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_User.Ids'(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
'skip_length_delimited_User.Ids'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_User.Ids'(Rest2, 0, 0, F@_1,
				  TrUserData).

'skip_group_User.Ids'(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_User.Ids'(Rest, 0, Z2, F@_1,
				  TrUserData).

'skip_32_User.Ids'(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    'dfp_read_field_def_User.Ids'(Rest, Z1, Z2, F@_1,
				  TrUserData).

'skip_64_User.Ids'(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    'dfp_read_field_def_User.Ids'(Rest, Z1, Z2, F@_1,
				  TrUserData).

'd_enum_User.gender'(1) -> 'Male';
'd_enum_User.gender'(2) -> 'Female';
'd_enum_User.gender'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'User.LoginReq' ->
	  'merge_msg_User.LoginReq'(Prev, New, TrUserData);
      'User.LoginResp' ->
	  'merge_msg_User.LoginResp'(Prev, New, TrUserData);
      'User.Person' ->
	  'merge_msg_User.Person'(Prev, New, TrUserData);
      'User.RangeResult' ->
	  'merge_msg_User.RangeResult'(Prev, New, TrUserData);
      'User.RangeRequest' ->
	  'merge_msg_User.RangeRequest'(Prev, New, TrUserData);
      'User.Name' ->
	  'merge_msg_User.Name'(Prev, New, TrUserData);
      'User.Ids' ->
	  'merge_msg_User.Ids'(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_User.LoginReq'/3}).
'merge_msg_User.LoginReq'(#'User.LoginReq'{},
			  #'User.LoginReq'{email = NFemail, passwd = NFpasswd},
			  _) ->
    #'User.LoginReq'{email = NFemail, passwd = NFpasswd}.

-compile({nowarn_unused_function,'merge_msg_User.LoginResp'/3}).
'merge_msg_User.LoginResp'(#'User.LoginResp'{person =
						 PFperson},
			   #'User.LoginResp'{res = NFres, person = NFperson},
			   TrUserData) ->
    #'User.LoginResp'{res = NFres,
		      person =
			  if PFperson /= undefined, NFperson /= undefined ->
				 'merge_msg_User.Person'(PFperson, NFperson,
							 TrUserData);
			     PFperson == undefined -> NFperson;
			     NFperson == undefined -> PFperson
			  end}.

-compile({nowarn_unused_function,'merge_msg_User.Person'/3}).
'merge_msg_User.Person'(#'User.Person'{sex = PFsex},
			#'User.Person'{id = NFid, name = NFname, age = NFage,
				       passwd = NFpasswd, email = NFemail,
				       sex = NFsex},
			_) ->
    #'User.Person'{id = NFid, name = NFname, age = NFage,
		   passwd = NFpasswd, email = NFemail,
		   sex =
		       if NFsex =:= undefined -> PFsex;
			  true -> NFsex
		       end}.

-compile({nowarn_unused_function,'merge_msg_User.RangeResult'/3}).
'merge_msg_User.RangeResult'(#'User.RangeResult'{persons
						     = PFpersons},
			     #'User.RangeResult'{persons = NFpersons},
			     TrUserData) ->
    #'User.RangeResult'{persons =
			    if PFpersons /= undefined, NFpersons /= undefined ->
				   'erlang_++'(PFpersons, NFpersons,
					       TrUserData);
			       PFpersons == undefined -> NFpersons;
			       NFpersons == undefined -> PFpersons
			    end}.

-compile({nowarn_unused_function,'merge_msg_User.RangeRequest'/3}).
'merge_msg_User.RangeRequest'(#'User.RangeRequest'{},
			      #'User.RangeRequest'{min_age = NFmin_age,
						   max_age = NFmax_age},
			      _) ->
    #'User.RangeRequest'{min_age = NFmin_age,
			 max_age = NFmax_age}.

-compile({nowarn_unused_function,'merge_msg_User.Name'/3}).
'merge_msg_User.Name'(#'User.Name'{},
		      #'User.Name'{name = NFname}, _) ->
    #'User.Name'{name = NFname}.

-compile({nowarn_unused_function,'merge_msg_User.Ids'/3}).
'merge_msg_User.Ids'(#'User.Ids'{ids = PFids},
		     #'User.Ids'{ids = NFids}, TrUserData) ->
    #'User.Ids'{ids =
		    if PFids /= undefined, NFids /= undefined ->
			   'erlang_++'(PFids, NFids, TrUserData);
		       PFids == undefined -> NFids;
		       NFids == undefined -> PFids
		    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'User.LoginReq' ->
	  'v_msg_User.LoginReq'(Msg, [MsgName], TrUserData);
      'User.LoginResp' ->
	  'v_msg_User.LoginResp'(Msg, [MsgName], TrUserData);
      'User.Person' ->
	  'v_msg_User.Person'(Msg, [MsgName], TrUserData);
      'User.RangeResult' ->
	  'v_msg_User.RangeResult'(Msg, [MsgName], TrUserData);
      'User.RangeRequest' ->
	  'v_msg_User.RangeRequest'(Msg, [MsgName], TrUserData);
      'User.Name' ->
	  'v_msg_User.Name'(Msg, [MsgName], TrUserData);
      'User.Ids' ->
	  'v_msg_User.Ids'(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_User.LoginReq'/3}).
-dialyzer({nowarn_function,'v_msg_User.LoginReq'/3}).
'v_msg_User.LoginReq'(#'User.LoginReq'{email = F1,
				       passwd = F2},
		      Path, TrUserData) ->
    v_type_string(F1, [email | Path], TrUserData),
    v_type_string(F2, [passwd | Path], TrUserData),
    ok;
'v_msg_User.LoginReq'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.LoginReq'}, X, Path).

-compile({nowarn_unused_function,'v_msg_User.LoginResp'/3}).
-dialyzer({nowarn_function,'v_msg_User.LoginResp'/3}).
'v_msg_User.LoginResp'(#'User.LoginResp'{res = F1,
					 person = F2},
		       Path, TrUserData) ->
    v_type_bool(F1, [res | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_User.Person'(F2, [person | Path], TrUserData)
    end,
    ok;
'v_msg_User.LoginResp'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.LoginResp'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_User.Person'/3}).
-dialyzer({nowarn_function,'v_msg_User.Person'/3}).
'v_msg_User.Person'(#'User.Person'{id = F1, name = F2,
				   age = F3, passwd = F4, email = F5, sex = F6},
		    Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_int32(F3, [age | Path], TrUserData),
    v_type_string(F4, [passwd | Path], TrUserData),
    v_type_string(F5, [email | Path], TrUserData),
    if F6 == undefined -> ok;
       true ->
	   'v_enum_User.gender'(F6, [sex | Path], TrUserData)
    end,
    ok;
'v_msg_User.Person'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.Person'}, X, Path).

-compile({nowarn_unused_function,'v_msg_User.RangeResult'/3}).
-dialyzer({nowarn_function,'v_msg_User.RangeResult'/3}).
'v_msg_User.RangeResult'(#'User.RangeResult'{persons =
						 F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_User.Person'(Elem, [persons | Path],
				    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'User.Person'}},
			 F1, [persons | Path])
    end,
    ok;
'v_msg_User.RangeResult'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.RangeResult'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_User.RangeRequest'/3}).
-dialyzer({nowarn_function,'v_msg_User.RangeRequest'/3}).
'v_msg_User.RangeRequest'(#'User.RangeRequest'{min_age =
						   F1,
					       max_age = F2},
			  Path, TrUserData) ->
    v_type_int32(F1, [min_age | Path], TrUserData),
    v_type_int32(F2, [max_age | Path], TrUserData),
    ok;
'v_msg_User.RangeRequest'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.RangeRequest'}, X,
		  Path).

-compile({nowarn_unused_function,'v_msg_User.Name'/3}).
-dialyzer({nowarn_function,'v_msg_User.Name'/3}).
'v_msg_User.Name'(#'User.Name'{name = F1}, Path,
		  TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData), ok;
'v_msg_User.Name'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.Name'}, X, Path).

-compile({nowarn_unused_function,'v_msg_User.Ids'/3}).
-dialyzer({nowarn_function,'v_msg_User.Ids'/3}).
'v_msg_User.Ids'(#'User.Ids'{ids = F1}, Path,
		 TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [ids | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [ids | Path])
    end,
    ok;
'v_msg_User.Ids'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'User.Ids'}, X, Path).

-compile({nowarn_unused_function,'v_enum_User.gender'/3}).
-dialyzer({nowarn_function,'v_enum_User.gender'/3}).
'v_enum_User.gender'('Male', _Path, _TrUserData) -> ok;
'v_enum_User.gender'('Female', _Path, _TrUserData) ->
    ok;
'v_enum_User.gender'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_User.gender'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'User.gender'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'User.router_service'},
      [{'Search', 1}, {'Admin', 2}]},
     {{enum, 'User.gender'}, [{'Male', 1}, {'Female', 2}]},
     {{msg, 'User.LoginReq'},
      [#field{name = email, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = passwd, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'User.LoginResp'},
      [#field{name = res, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = person, fnum = 2, rnum = 3,
	      type = {msg, 'User.Person'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'User.Person'},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = age, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = passwd, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = email, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = sex, fnum = 6, rnum = 7,
	      type = {enum, 'User.gender'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'User.RangeResult'},
      [#field{name = persons, fnum = 1, rnum = 2,
	      type = {msg, 'User.Person'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'User.RangeRequest'},
      [#field{name = min_age, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = max_age, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'User.Name'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'User.Ids'},
      [#field{name = ids, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['User.LoginReq', 'User.LoginResp', 'User.Person',
     'User.RangeResult', 'User.RangeRequest', 'User.Name',
     'User.Ids'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['User.LoginReq', 'User.LoginResp', 'User.Person',
     'User.RangeResult', 'User.RangeRequest', 'User.Name',
     'User.Ids'].


get_enum_names() ->
    ['User.router_service', 'User.gender'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('User.LoginReq') ->
    [#field{name = email, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = passwd, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('User.LoginResp') ->
    [#field{name = res, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = person, fnum = 2, rnum = 3,
	    type = {msg, 'User.Person'}, occurrence = optional,
	    opts = []}];
find_msg_def('User.Person') ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = age, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = passwd, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = email, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = sex, fnum = 6, rnum = 7,
	    type = {enum, 'User.gender'}, occurrence = optional,
	    opts = []}];
find_msg_def('User.RangeResult') ->
    [#field{name = persons, fnum = 1, rnum = 2,
	    type = {msg, 'User.Person'}, occurrence = repeated,
	    opts = []}];
find_msg_def('User.RangeRequest') ->
    [#field{name = min_age, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = max_age, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('User.Name') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('User.Ids') ->
    [#field{name = ids, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('User.router_service') ->
    [{'Search', 1}, {'Admin', 2}];
find_enum_def('User.gender') ->
    [{'Male', 1}, {'Female', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('User.router_service', Value) ->
    'enum_symbol_by_value_User.router_service'(Value);
enum_symbol_by_value('User.gender', Value) ->
    'enum_symbol_by_value_User.gender'(Value).


enum_value_by_symbol('User.router_service', Sym) ->
    'enum_value_by_symbol_User.router_service'(Sym);
enum_value_by_symbol('User.gender', Sym) ->
    'enum_value_by_symbol_User.gender'(Sym).


'enum_symbol_by_value_User.router_service'(1) ->
    'Search';
'enum_symbol_by_value_User.router_service'(2) ->
    'Admin'.


'enum_value_by_symbol_User.router_service'('Search') ->
    1;
'enum_value_by_symbol_User.router_service'('Admin') ->
    2.

'enum_symbol_by_value_User.gender'(1) -> 'Male';
'enum_symbol_by_value_User.gender'(2) -> 'Female'.


'enum_value_by_symbol_User.gender'('Male') -> 1;
'enum_value_by_symbol_User.gender'('Female') -> 2.


get_service_names() -> ['User.Search', 'User.Admin'].


get_service_def('User.Search') ->
    {{service, 'User.Search'},
     [#rpc{name = 'FindPersonByName', input = 'User.Name',
	   output = 'User.Person', input_stream = false,
	   output_stream = false, opts = [{seq, 1}]},
      #rpc{name = 'FindIdByName', input = 'User.Name',
	   output = 'User.Ids', input_stream = false,
	   output_stream = false, opts = [{seq, 2}]},
      #rpc{name = 'FindPersonByAge',
	   input = 'User.RangeRequest',
	   output = 'User.RangeResult', input_stream = false,
	   output_stream = false, opts = [{seq, 3}]}]};
get_service_def('User.Admin') ->
    {{service, 'User.Admin'},
     [#rpc{name = 'Login', input = 'User.Name',
	   output = 'User.Person', input_stream = false,
	   output_stream = false, opts = [{seq, 1}]}]};
get_service_def(_) -> error.


get_rpc_names('User.Search') ->
    ['FindPersonByName', 'FindIdByName', 'FindPersonByAge'];
get_rpc_names('User.Admin') -> ['Login'];
get_rpc_names(_) -> error.


find_rpc_def('User.Search', RpcName) ->
    'find_rpc_def_User.Search'(RpcName);
find_rpc_def('User.Admin', RpcName) ->
    'find_rpc_def_User.Admin'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_User.Search'('FindPersonByName') ->
    #rpc{name = 'FindPersonByName', input = 'User.Name',
	 output = 'User.Person', input_stream = false,
	 output_stream = false, opts = [{seq, 1}]};
'find_rpc_def_User.Search'('FindIdByName') ->
    #rpc{name = 'FindIdByName', input = 'User.Name',
	 output = 'User.Ids', input_stream = false,
	 output_stream = false, opts = [{seq, 2}]};
'find_rpc_def_User.Search'('FindPersonByAge') ->
    #rpc{name = 'FindPersonByAge',
	 input = 'User.RangeRequest',
	 output = 'User.RangeResult', input_stream = false,
	 output_stream = false, opts = [{seq, 3}]};
'find_rpc_def_User.Search'(_) -> error.

'find_rpc_def_User.Admin'('Login') ->
    #rpc{name = 'Login', input = 'User.Name',
	 output = 'User.Person', input_stream = false,
	 output_stream = false, opts = [{seq, 1}]};
'find_rpc_def_User.Admin'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_tuple(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


get_package_name() -> 'User'.



gpb_version_as_string() ->
    "4.4.0".

gpb_version_as_list() ->
    [4,4,0].
